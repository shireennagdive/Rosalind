from scripts import BLOSUM62


def middle_val(word1, word2, blosum):
    S = [[i * j * 5 for j in xrange(-1, 1)] for i in xrange(len(word1) + 1)]
    S[0][1] = -5
    m = [0] * (len(word1) + 1)
    for j in xrange(1, len(word2) / 2 + 1):
        for i in xrange(0, len(word1) + 1):
            if i == 0:
                S[i][1] = -j * 5
            else:
                val = [S[i - 1][0] + blosum[word1[i - 1], word2[j - 1]], S[i][0] - 5, S[i - 1][1] - 5]
                S[i][1] = max(val)
                m[i] = val.index(S[i][1])

        if j != len(word2) / 2:
            S = [[row[1]] * 2 for row in S]

    return [row[1] for row in S], m


def main():
    word1 = "RYPWTQQTKDLVGATDPLKDESTDECEWMRGGMFQPDYLIGDRGIQMPPRKVGDLTYETEYCRGQTYRNVIYNEMVPSEFYREKHAYCMRKWQNVCIWAIRASSFSVLMHCGKEENTSGDRAKWWDPYKSACWRCSRLTALDAQFLRACEHCHKIPPYAITFQNQWMRCFIACRREDIDGNEMFLRMCTATASMMERWGGQVDTTSVQLEICSTFRSHVGIQCPVIYEGWPEKTYNQLFRDKKNHMRGRFYCHERAYDWMRLEAAENQNTNQFKRNKWQECMEYCHGWTVPCRGIDLHRPRTKADWTRGRVQPDKSMYLSHFLWNLFFVARPTQTMSEMYPRCFHYQDLGIQQSQPHRTFSFDWECPTCMFVGLEFYPWEVNGKRQFAGKELTTHWIIAAPCKMSAMNPWCWGILQLLEPNNSVARRGPYECFYCYKSNIQVWESPITAALQPIIMVAMTRKEEMDDISQEDSEPEQQYYHWQMMNKNASQCKYPKNPTFRTSTYDQTRWAVYNCRLPRALPMSYQNCLNKRKIHWNKKHDIDYGGPYVTGVVAWQWIGKMPQKFHMHVMHPTMNNGFLPQLHEQRNKLEEFFMRGLQPCMQKMCYEPELHPQHTFSAVHLAYWPVYNSEWRNFCLYPAVLPNLPWPMTRENTCNWAFILDAHHPPMWVGRKWKDSKTGYYVTMDLMHGFIPQWGSYRQWNKIAFSNHQKKTETLRIRCRMRKFLYFMEEFLSDCHANGHTSDYYADHGKKSAGRRAFNQGDDKMDVYQYSAEGMMDMIRPMAKQVGTNDIGCPCLTDALGQSTNVRDPKLKYSKFIHMQPSYQEKCIFKWEQNPGNLVYLKCYKQEFQEYHPVIGNVVAACLFKIYTFKVTYNRFRHTIVWPSMSRQTWGMQLWKIFSCWYDTLSDYADVECHNGLVNPTLCKCANDIHDEGYMEGDREIFRCVVLKVTNGPGAKYGQVRTRFWHLLNNWRHSNQTYGGVWPLFFRPLQAAHDDGQLNWCWHDPMMYWLTQQFWYNYWYTESSCFGPVMPSRND"
    word2 = "SGRHRKYGGTTFRGKHCDFNFIVVKEIRHGWQWLPWTCSYPWRTDTLKHFYWGGEMVENNSRPRQFTTAIASDLNQYFGVIHNKHCKDIFFTTLCGPYAGQSFCDNGLLWNEKQVEIVKDRPKAASMRPSDSLRKLEVERMFEIYNDRMMFMLFLMQHTTKIIVIECMPKPGFTVYCDMERKCLRVYILHCYEFVVCGNPNFKAVWKGQCYVIYNLGICQHFMTWDCALTCRFTYCKLSLVPKIPTEFRSTTDLMIEDTSLAAAVFNYWPAPEFTETDFVSPSKCEHIWVHVRRKQDTLRHPFWQFGCPEEYYAIAEDDVPIDSKLNQFLQGNYLTHIIEARHELGCTRTGTLNMMRITFDPNFVTIRCSKRSPHSNYCWCFRSAAFCFPAYTAAVIPNEYRWPHIFMNFQMSKCYYETHKQINSFATNMAPRMYGEQFVDSPSQNMVMKLQPIIMRAMTGVSMMQMECMDDISQEDSEPEQYASQCKQPTNPTFRTSAGGCNSQGYDQQRWNCRWPRALPMSYQNCLNKRKIHWNKKHTVHGQDPFTYSMDYGGPYVTGVVAWQWIGKMPQHFHMFLDECVCTMNNGFLPQLHEQRMQCVMGCNYVWGISWHELNMDCLPFTFYHTDFRTSCKKGMYVQNNPEKHKHRSQLDCPIDMDHIGIVEIEIAKPYDTIPLDDWSNCILDLHFWWIIHGVADMPNLKFCLPKWLEIYRTIGKYCNEPRVEVAADDTANAMSFIFKWDEMMEFIPANKTPVKYVIQTFQNHMAFNIWHVTRLPNYKEENGPASVGEWYWWYCFIKYKLGHMVDSTMIWPSGGECHGNQDNETPFQPMKGDLIQLDKYRYKQKITYACISLPNYDRCEQTYLKEKIPSEFTVHAEPNNQHLFPPDWRNLMDGPPFTINAARMETLDDGTPWVQLKKCKRRSHVVSWNRGNMFFFGKWTDCFEYEMQPPTKALWMRFKVSKVLENELTTDGTRERPFNESDTHNSSEGCMMQELKPHNFGTGKNCGALQVPKAHFLAYHGFCAVIYRDEMTDIFAQFPTHELPI"

    source = middle_val(word1, word2, BLOSUM62())[0]
    middle, backtrack = map(lambda l: l[::-1],
                            middle_val(word1[::-1],
                                       word2[::-1] + ['', '$'][len(word2) % 2 == 1 and len(word2) > 1],
                                       BLOSUM62()))
    val = map(sum, zip(source, middle))

    midmax = max(xrange(len(val)), key=lambda i: val[i])

    if midmax == len(val) - 1:
        next_node = (midmax, len(word2) / 2 + 1)
    else:
        next_node = \
            [(midmax + 1, len(word2) / 2 + 1), (midmax, len(word2) / 2 + 1),
             (midmax + 1, len(word2) / 2), ][
                backtrack[midmax]]

    middle = (midmax, len(word2) / 2), next_node

    print ' '.join(map(str, middle))


main()
